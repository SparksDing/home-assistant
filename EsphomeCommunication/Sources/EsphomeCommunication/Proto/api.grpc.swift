// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - APIConnection

/// Namespace containing generated types for the "APIConnection" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum APIConnection {
    /// Service descriptor for the "APIConnection" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "hello" metadata.
        internal enum hello {
            /// Request type for "hello".
            internal typealias Input = HelloRequest
            /// Response type for "hello".
            internal typealias Output = HelloResponse
            /// Descriptor for "hello".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "hello"
            )
        }
        /// Namespace for "connect" metadata.
        internal enum connect {
            /// Request type for "connect".
            internal typealias Input = ConnectRequest
            /// Response type for "connect".
            internal typealias Output = ConnectResponse
            /// Descriptor for "connect".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "connect"
            )
        }
        /// Namespace for "disconnect" metadata.
        internal enum disconnect {
            /// Request type for "disconnect".
            internal typealias Input = DisconnectRequest
            /// Response type for "disconnect".
            internal typealias Output = DisconnectResponse
            /// Descriptor for "disconnect".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "disconnect"
            )
        }
        /// Namespace for "ping" metadata.
        internal enum ping {
            /// Request type for "ping".
            internal typealias Input = PingRequest
            /// Response type for "ping".
            internal typealias Output = PingResponse
            /// Descriptor for "ping".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "ping"
            )
        }
        /// Namespace for "device_info" metadata.
        internal enum device_info {
            /// Request type for "device_info".
            internal typealias Input = DeviceInfoRequest
            /// Response type for "device_info".
            internal typealias Output = DeviceInfoResponse
            /// Descriptor for "device_info".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "device_info"
            )
        }
        /// Namespace for "list_entities" metadata.
        internal enum list_entities {
            /// Request type for "list_entities".
            internal typealias Input = ListEntitiesRequest
            /// Response type for "list_entities".
            internal typealias Output = void
            /// Descriptor for "list_entities".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "list_entities"
            )
        }
        /// Namespace for "subscribe_states" metadata.
        internal enum subscribe_states {
            /// Request type for "subscribe_states".
            internal typealias Input = SubscribeStatesRequest
            /// Response type for "subscribe_states".
            internal typealias Output = void
            /// Descriptor for "subscribe_states".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_states"
            )
        }
        /// Namespace for "subscribe_logs" metadata.
        internal enum subscribe_logs {
            /// Request type for "subscribe_logs".
            internal typealias Input = SubscribeLogsRequest
            /// Response type for "subscribe_logs".
            internal typealias Output = void
            /// Descriptor for "subscribe_logs".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_logs"
            )
        }
        /// Namespace for "subscribe_homeassistant_services" metadata.
        internal enum subscribe_homeassistant_services {
            /// Request type for "subscribe_homeassistant_services".
            internal typealias Input = SubscribeHomeassistantServicesRequest
            /// Response type for "subscribe_homeassistant_services".
            internal typealias Output = void
            /// Descriptor for "subscribe_homeassistant_services".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_homeassistant_services"
            )
        }
        /// Namespace for "subscribe_home_assistant_states" metadata.
        internal enum subscribe_home_assistant_states {
            /// Request type for "subscribe_home_assistant_states".
            internal typealias Input = SubscribeHomeAssistantStatesRequest
            /// Response type for "subscribe_home_assistant_states".
            internal typealias Output = void
            /// Descriptor for "subscribe_home_assistant_states".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_home_assistant_states"
            )
        }
        /// Namespace for "get_time" metadata.
        internal enum get_time {
            /// Request type for "get_time".
            internal typealias Input = GetTimeRequest
            /// Response type for "get_time".
            internal typealias Output = GetTimeResponse
            /// Descriptor for "get_time".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "get_time"
            )
        }
        /// Namespace for "execute_service" metadata.
        internal enum execute_service {
            /// Request type for "execute_service".
            internal typealias Input = ExecuteServiceRequest
            /// Response type for "execute_service".
            internal typealias Output = void
            /// Descriptor for "execute_service".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "execute_service"
            )
        }
        /// Namespace for "noise_encryption_set_key" metadata.
        internal enum noise_encryption_set_key {
            /// Request type for "noise_encryption_set_key".
            internal typealias Input = NoiseEncryptionSetKeyRequest
            /// Response type for "noise_encryption_set_key".
            internal typealias Output = NoiseEncryptionSetKeyResponse
            /// Descriptor for "noise_encryption_set_key".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "noise_encryption_set_key"
            )
        }
        /// Namespace for "button_command" metadata.
        internal enum button_command {
            /// Request type for "button_command".
            internal typealias Input = ButtonCommandRequest
            /// Response type for "button_command".
            internal typealias Output = void
            /// Descriptor for "button_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "button_command"
            )
        }
        /// Namespace for "camera_image" metadata.
        internal enum camera_image {
            /// Request type for "camera_image".
            internal typealias Input = CameraImageRequest
            /// Response type for "camera_image".
            internal typealias Output = void
            /// Descriptor for "camera_image".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "camera_image"
            )
        }
        /// Namespace for "climate_command" metadata.
        internal enum climate_command {
            /// Request type for "climate_command".
            internal typealias Input = ClimateCommandRequest
            /// Response type for "climate_command".
            internal typealias Output = void
            /// Descriptor for "climate_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "climate_command"
            )
        }
        /// Namespace for "cover_command" metadata.
        internal enum cover_command {
            /// Request type for "cover_command".
            internal typealias Input = CoverCommandRequest
            /// Response type for "cover_command".
            internal typealias Output = void
            /// Descriptor for "cover_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "cover_command"
            )
        }
        /// Namespace for "date_command" metadata.
        internal enum date_command {
            /// Request type for "date_command".
            internal typealias Input = DateCommandRequest
            /// Response type for "date_command".
            internal typealias Output = void
            /// Descriptor for "date_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "date_command"
            )
        }
        /// Namespace for "datetime_command" metadata.
        internal enum datetime_command {
            /// Request type for "datetime_command".
            internal typealias Input = DateTimeCommandRequest
            /// Response type for "datetime_command".
            internal typealias Output = void
            /// Descriptor for "datetime_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "datetime_command"
            )
        }
        /// Namespace for "fan_command" metadata.
        internal enum fan_command {
            /// Request type for "fan_command".
            internal typealias Input = FanCommandRequest
            /// Response type for "fan_command".
            internal typealias Output = void
            /// Descriptor for "fan_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "fan_command"
            )
        }
        /// Namespace for "light_command" metadata.
        internal enum light_command {
            /// Request type for "light_command".
            internal typealias Input = LightCommandRequest
            /// Response type for "light_command".
            internal typealias Output = void
            /// Descriptor for "light_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "light_command"
            )
        }
        /// Namespace for "lock_command" metadata.
        internal enum lock_command {
            /// Request type for "lock_command".
            internal typealias Input = LockCommandRequest
            /// Response type for "lock_command".
            internal typealias Output = void
            /// Descriptor for "lock_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "lock_command"
            )
        }
        /// Namespace for "media_player_command" metadata.
        internal enum media_player_command {
            /// Request type for "media_player_command".
            internal typealias Input = MediaPlayerCommandRequest
            /// Response type for "media_player_command".
            internal typealias Output = void
            /// Descriptor for "media_player_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "media_player_command"
            )
        }
        /// Namespace for "number_command" metadata.
        internal enum number_command {
            /// Request type for "number_command".
            internal typealias Input = NumberCommandRequest
            /// Response type for "number_command".
            internal typealias Output = void
            /// Descriptor for "number_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "number_command"
            )
        }
        /// Namespace for "select_command" metadata.
        internal enum select_command {
            /// Request type for "select_command".
            internal typealias Input = SelectCommandRequest
            /// Response type for "select_command".
            internal typealias Output = void
            /// Descriptor for "select_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "select_command"
            )
        }
        /// Namespace for "siren_command" metadata.
        internal enum siren_command {
            /// Request type for "siren_command".
            internal typealias Input = SirenCommandRequest
            /// Response type for "siren_command".
            internal typealias Output = void
            /// Descriptor for "siren_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "siren_command"
            )
        }
        /// Namespace for "switch_command" metadata.
        internal enum switch_command {
            /// Request type for "switch_command".
            internal typealias Input = SwitchCommandRequest
            /// Response type for "switch_command".
            internal typealias Output = void
            /// Descriptor for "switch_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "switch_command"
            )
        }
        /// Namespace for "text_command" metadata.
        internal enum text_command {
            /// Request type for "text_command".
            internal typealias Input = TextCommandRequest
            /// Response type for "text_command".
            internal typealias Output = void
            /// Descriptor for "text_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "text_command"
            )
        }
        /// Namespace for "time_command" metadata.
        internal enum time_command {
            /// Request type for "time_command".
            internal typealias Input = TimeCommandRequest
            /// Response type for "time_command".
            internal typealias Output = void
            /// Descriptor for "time_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "time_command"
            )
        }
        /// Namespace for "update_command" metadata.
        internal enum update_command {
            /// Request type for "update_command".
            internal typealias Input = UpdateCommandRequest
            /// Response type for "update_command".
            internal typealias Output = void
            /// Descriptor for "update_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "update_command"
            )
        }
        /// Namespace for "valve_command" metadata.
        internal enum valve_command {
            /// Request type for "valve_command".
            internal typealias Input = ValveCommandRequest
            /// Response type for "valve_command".
            internal typealias Output = void
            /// Descriptor for "valve_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "valve_command"
            )
        }
        /// Namespace for "subscribe_bluetooth_le_advertisements" metadata.
        internal enum subscribe_bluetooth_le_advertisements {
            /// Request type for "subscribe_bluetooth_le_advertisements".
            internal typealias Input = SubscribeBluetoothLEAdvertisementsRequest
            /// Response type for "subscribe_bluetooth_le_advertisements".
            internal typealias Output = void
            /// Descriptor for "subscribe_bluetooth_le_advertisements".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_bluetooth_le_advertisements"
            )
        }
        /// Namespace for "bluetooth_device_request" metadata.
        internal enum bluetooth_device_request {
            /// Request type for "bluetooth_device_request".
            internal typealias Input = BluetoothDeviceRequest
            /// Response type for "bluetooth_device_request".
            internal typealias Output = void
            /// Descriptor for "bluetooth_device_request".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_device_request"
            )
        }
        /// Namespace for "bluetooth_gatt_get_services" metadata.
        internal enum bluetooth_gatt_get_services {
            /// Request type for "bluetooth_gatt_get_services".
            internal typealias Input = BluetoothGATTGetServicesRequest
            /// Response type for "bluetooth_gatt_get_services".
            internal typealias Output = void
            /// Descriptor for "bluetooth_gatt_get_services".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_gatt_get_services"
            )
        }
        /// Namespace for "bluetooth_gatt_read" metadata.
        internal enum bluetooth_gatt_read {
            /// Request type for "bluetooth_gatt_read".
            internal typealias Input = BluetoothGATTReadRequest
            /// Response type for "bluetooth_gatt_read".
            internal typealias Output = void
            /// Descriptor for "bluetooth_gatt_read".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_gatt_read"
            )
        }
        /// Namespace for "bluetooth_gatt_write" metadata.
        internal enum bluetooth_gatt_write {
            /// Request type for "bluetooth_gatt_write".
            internal typealias Input = BluetoothGATTWriteRequest
            /// Response type for "bluetooth_gatt_write".
            internal typealias Output = void
            /// Descriptor for "bluetooth_gatt_write".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_gatt_write"
            )
        }
        /// Namespace for "bluetooth_gatt_read_descriptor" metadata.
        internal enum bluetooth_gatt_read_descriptor {
            /// Request type for "bluetooth_gatt_read_descriptor".
            internal typealias Input = BluetoothGATTReadDescriptorRequest
            /// Response type for "bluetooth_gatt_read_descriptor".
            internal typealias Output = void
            /// Descriptor for "bluetooth_gatt_read_descriptor".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_gatt_read_descriptor"
            )
        }
        /// Namespace for "bluetooth_gatt_write_descriptor" metadata.
        internal enum bluetooth_gatt_write_descriptor {
            /// Request type for "bluetooth_gatt_write_descriptor".
            internal typealias Input = BluetoothGATTWriteDescriptorRequest
            /// Response type for "bluetooth_gatt_write_descriptor".
            internal typealias Output = void
            /// Descriptor for "bluetooth_gatt_write_descriptor".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_gatt_write_descriptor"
            )
        }
        /// Namespace for "bluetooth_gatt_notify" metadata.
        internal enum bluetooth_gatt_notify {
            /// Request type for "bluetooth_gatt_notify".
            internal typealias Input = BluetoothGATTNotifyRequest
            /// Response type for "bluetooth_gatt_notify".
            internal typealias Output = void
            /// Descriptor for "bluetooth_gatt_notify".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_gatt_notify"
            )
        }
        /// Namespace for "subscribe_bluetooth_connections_free" metadata.
        internal enum subscribe_bluetooth_connections_free {
            /// Request type for "subscribe_bluetooth_connections_free".
            internal typealias Input = SubscribeBluetoothConnectionsFreeRequest
            /// Response type for "subscribe_bluetooth_connections_free".
            internal typealias Output = BluetoothConnectionsFreeResponse
            /// Descriptor for "subscribe_bluetooth_connections_free".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_bluetooth_connections_free"
            )
        }
        /// Namespace for "unsubscribe_bluetooth_le_advertisements" metadata.
        internal enum unsubscribe_bluetooth_le_advertisements {
            /// Request type for "unsubscribe_bluetooth_le_advertisements".
            internal typealias Input = UnsubscribeBluetoothLEAdvertisementsRequest
            /// Response type for "unsubscribe_bluetooth_le_advertisements".
            internal typealias Output = void
            /// Descriptor for "unsubscribe_bluetooth_le_advertisements".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "unsubscribe_bluetooth_le_advertisements"
            )
        }
        /// Namespace for "bluetooth_scanner_set_mode" metadata.
        internal enum bluetooth_scanner_set_mode {
            /// Request type for "bluetooth_scanner_set_mode".
            internal typealias Input = BluetoothScannerSetModeRequest
            /// Response type for "bluetooth_scanner_set_mode".
            internal typealias Output = void
            /// Descriptor for "bluetooth_scanner_set_mode".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "bluetooth_scanner_set_mode"
            )
        }
        /// Namespace for "subscribe_voice_assistant" metadata.
        internal enum subscribe_voice_assistant {
            /// Request type for "subscribe_voice_assistant".
            internal typealias Input = SubscribeVoiceAssistantRequest
            /// Response type for "subscribe_voice_assistant".
            internal typealias Output = void
            /// Descriptor for "subscribe_voice_assistant".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "subscribe_voice_assistant"
            )
        }
        /// Namespace for "voice_assistant_get_configuration" metadata.
        internal enum voice_assistant_get_configuration {
            /// Request type for "voice_assistant_get_configuration".
            internal typealias Input = VoiceAssistantConfigurationRequest
            /// Response type for "voice_assistant_get_configuration".
            internal typealias Output = VoiceAssistantConfigurationResponse
            /// Descriptor for "voice_assistant_get_configuration".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "voice_assistant_get_configuration"
            )
        }
        /// Namespace for "voice_assistant_set_configuration" metadata.
        internal enum voice_assistant_set_configuration {
            /// Request type for "voice_assistant_set_configuration".
            internal typealias Input = VoiceAssistantSetConfiguration
            /// Response type for "voice_assistant_set_configuration".
            internal typealias Output = void
            /// Descriptor for "voice_assistant_set_configuration".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "voice_assistant_set_configuration"
            )
        }
        /// Namespace for "alarm_control_panel_command" metadata.
        internal enum alarm_control_panel_command {
            /// Request type for "alarm_control_panel_command".
            internal typealias Input = AlarmControlPanelCommandRequest
            /// Response type for "alarm_control_panel_command".
            internal typealias Output = void
            /// Descriptor for "alarm_control_panel_command".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection"),
                method: "alarm_control_panel_command"
            )
        }
        /// Descriptors for all methods in the "APIConnection" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            hello.descriptor,
            connect.descriptor,
            disconnect.descriptor,
            ping.descriptor,
            device_info.descriptor,
            list_entities.descriptor,
            subscribe_states.descriptor,
            subscribe_logs.descriptor,
            subscribe_homeassistant_services.descriptor,
            subscribe_home_assistant_states.descriptor,
            get_time.descriptor,
            execute_service.descriptor,
            noise_encryption_set_key.descriptor,
            button_command.descriptor,
            camera_image.descriptor,
            climate_command.descriptor,
            cover_command.descriptor,
            date_command.descriptor,
            datetime_command.descriptor,
            fan_command.descriptor,
            light_command.descriptor,
            lock_command.descriptor,
            media_player_command.descriptor,
            number_command.descriptor,
            select_command.descriptor,
            siren_command.descriptor,
            switch_command.descriptor,
            text_command.descriptor,
            time_command.descriptor,
            update_command.descriptor,
            valve_command.descriptor,
            subscribe_bluetooth_le_advertisements.descriptor,
            bluetooth_device_request.descriptor,
            bluetooth_gatt_get_services.descriptor,
            bluetooth_gatt_read.descriptor,
            bluetooth_gatt_write.descriptor,
            bluetooth_gatt_read_descriptor.descriptor,
            bluetooth_gatt_write_descriptor.descriptor,
            bluetooth_gatt_notify.descriptor,
            subscribe_bluetooth_connections_free.descriptor,
            unsubscribe_bluetooth_le_advertisements.descriptor,
            bluetooth_scanner_set_mode.descriptor,
            subscribe_voice_assistant.descriptor,
            voice_assistant_get_configuration.descriptor,
            voice_assistant_set_configuration.descriptor,
            alarm_control_panel_command.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "APIConnection" service.
    internal static let APIConnection = GRPCCore.ServiceDescriptor(fullyQualifiedService: "APIConnection")
}

// MARK: APIConnection (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection {
    /// Streaming variant of the service protocol for the "APIConnection" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "hello" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `HelloRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `HelloResponse` messages.
        func hello(
            request: GRPCCore.StreamingServerRequest<HelloRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<HelloResponse>

        /// Handle the "connect" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ConnectRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ConnectResponse` messages.
        func connect(
            request: GRPCCore.StreamingServerRequest<ConnectRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ConnectResponse>

        /// Handle the "disconnect" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `DisconnectRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `DisconnectResponse` messages.
        func disconnect(
            request: GRPCCore.StreamingServerRequest<DisconnectRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<DisconnectResponse>

        /// Handle the "ping" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `PingRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `PingResponse` messages.
        func ping(
            request: GRPCCore.StreamingServerRequest<PingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<PingResponse>

        /// Handle the "device_info" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `DeviceInfoRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `DeviceInfoResponse` messages.
        func device_info(
            request: GRPCCore.StreamingServerRequest<DeviceInfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<DeviceInfoResponse>

        /// Handle the "list_entities" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ListEntitiesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func list_entities(
            request: GRPCCore.StreamingServerRequest<ListEntitiesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_states" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeStatesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func subscribe_states(
            request: GRPCCore.StreamingServerRequest<SubscribeStatesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_logs" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeLogsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func subscribe_logs(
            request: GRPCCore.StreamingServerRequest<SubscribeLogsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_homeassistant_services" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeHomeassistantServicesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func subscribe_homeassistant_services(
            request: GRPCCore.StreamingServerRequest<SubscribeHomeassistantServicesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_home_assistant_states" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeHomeAssistantStatesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func subscribe_home_assistant_states(
            request: GRPCCore.StreamingServerRequest<SubscribeHomeAssistantStatesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "get_time" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `GetTimeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `GetTimeResponse` messages.
        func get_time(
            request: GRPCCore.StreamingServerRequest<GetTimeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<GetTimeResponse>

        /// Handle the "execute_service" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ExecuteServiceRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func execute_service(
            request: GRPCCore.StreamingServerRequest<ExecuteServiceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "noise_encryption_set_key" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `NoiseEncryptionSetKeyRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `NoiseEncryptionSetKeyResponse` messages.
        func noise_encryption_set_key(
            request: GRPCCore.StreamingServerRequest<NoiseEncryptionSetKeyRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<NoiseEncryptionSetKeyResponse>

        /// Handle the "button_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ButtonCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func button_command(
            request: GRPCCore.StreamingServerRequest<ButtonCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "camera_image" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `CameraImageRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func camera_image(
            request: GRPCCore.StreamingServerRequest<CameraImageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "climate_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ClimateCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func climate_command(
            request: GRPCCore.StreamingServerRequest<ClimateCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "cover_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `CoverCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func cover_command(
            request: GRPCCore.StreamingServerRequest<CoverCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "date_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `DateCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func date_command(
            request: GRPCCore.StreamingServerRequest<DateCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "datetime_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `DateTimeCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func datetime_command(
            request: GRPCCore.StreamingServerRequest<DateTimeCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "fan_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `FanCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func fan_command(
            request: GRPCCore.StreamingServerRequest<FanCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "light_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `LightCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func light_command(
            request: GRPCCore.StreamingServerRequest<LightCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "lock_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `LockCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func lock_command(
            request: GRPCCore.StreamingServerRequest<LockCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "media_player_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `MediaPlayerCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func media_player_command(
            request: GRPCCore.StreamingServerRequest<MediaPlayerCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "number_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `NumberCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func number_command(
            request: GRPCCore.StreamingServerRequest<NumberCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "select_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SelectCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func select_command(
            request: GRPCCore.StreamingServerRequest<SelectCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "siren_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SirenCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func siren_command(
            request: GRPCCore.StreamingServerRequest<SirenCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "switch_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SwitchCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func switch_command(
            request: GRPCCore.StreamingServerRequest<SwitchCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "text_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `TextCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func text_command(
            request: GRPCCore.StreamingServerRequest<TextCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "time_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `TimeCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func time_command(
            request: GRPCCore.StreamingServerRequest<TimeCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "update_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `UpdateCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func update_command(
            request: GRPCCore.StreamingServerRequest<UpdateCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "valve_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ValveCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func valve_command(
            request: GRPCCore.StreamingServerRequest<ValveCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeBluetoothLEAdvertisementsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func subscribe_bluetooth_le_advertisements(
            request: GRPCCore.StreamingServerRequest<SubscribeBluetoothLEAdvertisementsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_device_request" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothDeviceRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_device_request(
            request: GRPCCore.StreamingServerRequest<BluetoothDeviceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_gatt_get_services" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothGATTGetServicesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_gatt_get_services(
            request: GRPCCore.StreamingServerRequest<BluetoothGATTGetServicesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_gatt_read" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothGATTReadRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_gatt_read(
            request: GRPCCore.StreamingServerRequest<BluetoothGATTReadRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_gatt_write" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothGATTWriteRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_gatt_write(
            request: GRPCCore.StreamingServerRequest<BluetoothGATTWriteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_gatt_read_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothGATTReadDescriptorRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_gatt_read_descriptor(
            request: GRPCCore.StreamingServerRequest<BluetoothGATTReadDescriptorRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_gatt_write_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothGATTWriteDescriptorRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_gatt_write_descriptor(
            request: GRPCCore.StreamingServerRequest<BluetoothGATTWriteDescriptorRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_gatt_notify" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothGATTNotifyRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_gatt_notify(
            request: GRPCCore.StreamingServerRequest<BluetoothGATTNotifyRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_bluetooth_connections_free" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeBluetoothConnectionsFreeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `BluetoothConnectionsFreeResponse` messages.
        func subscribe_bluetooth_connections_free(
            request: GRPCCore.StreamingServerRequest<SubscribeBluetoothConnectionsFreeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<BluetoothConnectionsFreeResponse>

        /// Handle the "unsubscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `UnsubscribeBluetoothLEAdvertisementsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func unsubscribe_bluetooth_le_advertisements(
            request: GRPCCore.StreamingServerRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "bluetooth_scanner_set_mode" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BluetoothScannerSetModeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func bluetooth_scanner_set_mode(
            request: GRPCCore.StreamingServerRequest<BluetoothScannerSetModeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "subscribe_voice_assistant" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SubscribeVoiceAssistantRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func subscribe_voice_assistant(
            request: GRPCCore.StreamingServerRequest<SubscribeVoiceAssistantRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "voice_assistant_get_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `VoiceAssistantConfigurationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `VoiceAssistantConfigurationResponse` messages.
        func voice_assistant_get_configuration(
            request: GRPCCore.StreamingServerRequest<VoiceAssistantConfigurationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<VoiceAssistantConfigurationResponse>

        /// Handle the "voice_assistant_set_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `VoiceAssistantSetConfiguration` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func voice_assistant_set_configuration(
            request: GRPCCore.StreamingServerRequest<VoiceAssistantSetConfiguration>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>

        /// Handle the "alarm_control_panel_command" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `AlarmControlPanelCommandRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `void` messages.
        func alarm_control_panel_command(
            request: GRPCCore.StreamingServerRequest<AlarmControlPanelCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<void>
    }

    /// Service protocol for the "APIConnection" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: APIConnection.StreamingServiceProtocol {
        /// Handle the "hello" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `HelloRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `HelloResponse` message.
        func hello(
            request: GRPCCore.ServerRequest<HelloRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<HelloResponse>

        /// Handle the "connect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ConnectRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ConnectResponse` message.
        func connect(
            request: GRPCCore.ServerRequest<ConnectRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ConnectResponse>

        /// Handle the "disconnect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DisconnectRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `DisconnectResponse` message.
        func disconnect(
            request: GRPCCore.ServerRequest<DisconnectRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<DisconnectResponse>

        /// Handle the "ping" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `PingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `PingResponse` message.
        func ping(
            request: GRPCCore.ServerRequest<PingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<PingResponse>

        /// Handle the "device_info" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DeviceInfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `DeviceInfoResponse` message.
        func device_info(
            request: GRPCCore.ServerRequest<DeviceInfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<DeviceInfoResponse>

        /// Handle the "list_entities" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ListEntitiesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func list_entities(
            request: GRPCCore.ServerRequest<ListEntitiesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_states" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeStatesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func subscribe_states(
            request: GRPCCore.ServerRequest<SubscribeStatesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_logs" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeLogsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func subscribe_logs(
            request: GRPCCore.ServerRequest<SubscribeLogsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_homeassistant_services" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeHomeassistantServicesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func subscribe_homeassistant_services(
            request: GRPCCore.ServerRequest<SubscribeHomeassistantServicesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_home_assistant_states" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeHomeAssistantStatesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func subscribe_home_assistant_states(
            request: GRPCCore.ServerRequest<SubscribeHomeAssistantStatesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "get_time" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `GetTimeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `GetTimeResponse` message.
        func get_time(
            request: GRPCCore.ServerRequest<GetTimeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<GetTimeResponse>

        /// Handle the "execute_service" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ExecuteServiceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func execute_service(
            request: GRPCCore.ServerRequest<ExecuteServiceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "noise_encryption_set_key" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `NoiseEncryptionSetKeyRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `NoiseEncryptionSetKeyResponse` message.
        func noise_encryption_set_key(
            request: GRPCCore.ServerRequest<NoiseEncryptionSetKeyRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<NoiseEncryptionSetKeyResponse>

        /// Handle the "button_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ButtonCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func button_command(
            request: GRPCCore.ServerRequest<ButtonCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "camera_image" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CameraImageRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func camera_image(
            request: GRPCCore.ServerRequest<CameraImageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "climate_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClimateCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func climate_command(
            request: GRPCCore.ServerRequest<ClimateCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "cover_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CoverCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func cover_command(
            request: GRPCCore.ServerRequest<CoverCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "date_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DateCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func date_command(
            request: GRPCCore.ServerRequest<DateCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "datetime_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DateTimeCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func datetime_command(
            request: GRPCCore.ServerRequest<DateTimeCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "fan_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `FanCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func fan_command(
            request: GRPCCore.ServerRequest<FanCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "light_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LightCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func light_command(
            request: GRPCCore.ServerRequest<LightCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "lock_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LockCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func lock_command(
            request: GRPCCore.ServerRequest<LockCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "media_player_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `MediaPlayerCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func media_player_command(
            request: GRPCCore.ServerRequest<MediaPlayerCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "number_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `NumberCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func number_command(
            request: GRPCCore.ServerRequest<NumberCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "select_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SelectCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func select_command(
            request: GRPCCore.ServerRequest<SelectCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "siren_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SirenCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func siren_command(
            request: GRPCCore.ServerRequest<SirenCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "switch_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwitchCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func switch_command(
            request: GRPCCore.ServerRequest<SwitchCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "text_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TextCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func text_command(
            request: GRPCCore.ServerRequest<TextCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "time_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TimeCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func time_command(
            request: GRPCCore.ServerRequest<TimeCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "update_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UpdateCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func update_command(
            request: GRPCCore.ServerRequest<UpdateCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "valve_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ValveCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func valve_command(
            request: GRPCCore.ServerRequest<ValveCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func subscribe_bluetooth_le_advertisements(
            request: GRPCCore.ServerRequest<SubscribeBluetoothLEAdvertisementsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_device_request" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothDeviceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_device_request(
            request: GRPCCore.ServerRequest<BluetoothDeviceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_gatt_get_services" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTGetServicesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_gatt_get_services(
            request: GRPCCore.ServerRequest<BluetoothGATTGetServicesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_gatt_read" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTReadRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_gatt_read(
            request: GRPCCore.ServerRequest<BluetoothGATTReadRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_gatt_write" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTWriteRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_gatt_write(
            request: GRPCCore.ServerRequest<BluetoothGATTWriteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_gatt_read_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTReadDescriptorRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_gatt_read_descriptor(
            request: GRPCCore.ServerRequest<BluetoothGATTReadDescriptorRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_gatt_write_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTWriteDescriptorRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_gatt_write_descriptor(
            request: GRPCCore.ServerRequest<BluetoothGATTWriteDescriptorRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_gatt_notify" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTNotifyRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_gatt_notify(
            request: GRPCCore.ServerRequest<BluetoothGATTNotifyRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_bluetooth_connections_free" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeBluetoothConnectionsFreeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `BluetoothConnectionsFreeResponse` message.
        func subscribe_bluetooth_connections_free(
            request: GRPCCore.ServerRequest<SubscribeBluetoothConnectionsFreeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<BluetoothConnectionsFreeResponse>

        /// Handle the "unsubscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UnsubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func unsubscribe_bluetooth_le_advertisements(
            request: GRPCCore.ServerRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "bluetooth_scanner_set_mode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothScannerSetModeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func bluetooth_scanner_set_mode(
            request: GRPCCore.ServerRequest<BluetoothScannerSetModeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "subscribe_voice_assistant" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeVoiceAssistantRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func subscribe_voice_assistant(
            request: GRPCCore.ServerRequest<SubscribeVoiceAssistantRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "voice_assistant_get_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `VoiceAssistantConfigurationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `VoiceAssistantConfigurationResponse` message.
        func voice_assistant_get_configuration(
            request: GRPCCore.ServerRequest<VoiceAssistantConfigurationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<VoiceAssistantConfigurationResponse>

        /// Handle the "voice_assistant_set_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `VoiceAssistantSetConfiguration` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func voice_assistant_set_configuration(
            request: GRPCCore.ServerRequest<VoiceAssistantSetConfiguration>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>

        /// Handle the "alarm_control_panel_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AlarmControlPanelCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `void` message.
        func alarm_control_panel_command(
            request: GRPCCore.ServerRequest<AlarmControlPanelCommandRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<void>
    }

    /// Simple service protocol for the "APIConnection" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: APIConnection.ServiceProtocol {
        /// Handle the "hello" method.
        ///
        /// - Parameters:
        ///   - request: A `HelloRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `HelloResponse` to respond with.
        func hello(
            request: HelloRequest,
            context: GRPCCore.ServerContext
        ) async throws -> HelloResponse

        /// Handle the "connect" method.
        ///
        /// - Parameters:
        ///   - request: A `ConnectRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ConnectResponse` to respond with.
        func connect(
            request: ConnectRequest,
            context: GRPCCore.ServerContext
        ) async throws -> ConnectResponse

        /// Handle the "disconnect" method.
        ///
        /// - Parameters:
        ///   - request: A `DisconnectRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `DisconnectResponse` to respond with.
        func disconnect(
            request: DisconnectRequest,
            context: GRPCCore.ServerContext
        ) async throws -> DisconnectResponse

        /// Handle the "ping" method.
        ///
        /// - Parameters:
        ///   - request: A `PingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `PingResponse` to respond with.
        func ping(
            request: PingRequest,
            context: GRPCCore.ServerContext
        ) async throws -> PingResponse

        /// Handle the "device_info" method.
        ///
        /// - Parameters:
        ///   - request: A `DeviceInfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `DeviceInfoResponse` to respond with.
        func device_info(
            request: DeviceInfoRequest,
            context: GRPCCore.ServerContext
        ) async throws -> DeviceInfoResponse

        /// Handle the "list_entities" method.
        ///
        /// - Parameters:
        ///   - request: A `ListEntitiesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func list_entities(
            request: ListEntitiesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_states" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeStatesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func subscribe_states(
            request: SubscribeStatesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_logs" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeLogsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func subscribe_logs(
            request: SubscribeLogsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_homeassistant_services" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeHomeassistantServicesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func subscribe_homeassistant_services(
            request: SubscribeHomeassistantServicesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_home_assistant_states" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeHomeAssistantStatesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func subscribe_home_assistant_states(
            request: SubscribeHomeAssistantStatesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "get_time" method.
        ///
        /// - Parameters:
        ///   - request: A `GetTimeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `GetTimeResponse` to respond with.
        func get_time(
            request: GetTimeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> GetTimeResponse

        /// Handle the "execute_service" method.
        ///
        /// - Parameters:
        ///   - request: A `ExecuteServiceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func execute_service(
            request: ExecuteServiceRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "noise_encryption_set_key" method.
        ///
        /// - Parameters:
        ///   - request: A `NoiseEncryptionSetKeyRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `NoiseEncryptionSetKeyResponse` to respond with.
        func noise_encryption_set_key(
            request: NoiseEncryptionSetKeyRequest,
            context: GRPCCore.ServerContext
        ) async throws -> NoiseEncryptionSetKeyResponse

        /// Handle the "button_command" method.
        ///
        /// - Parameters:
        ///   - request: A `ButtonCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func button_command(
            request: ButtonCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "camera_image" method.
        ///
        /// - Parameters:
        ///   - request: A `CameraImageRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func camera_image(
            request: CameraImageRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "climate_command" method.
        ///
        /// - Parameters:
        ///   - request: A `ClimateCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func climate_command(
            request: ClimateCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "cover_command" method.
        ///
        /// - Parameters:
        ///   - request: A `CoverCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func cover_command(
            request: CoverCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "date_command" method.
        ///
        /// - Parameters:
        ///   - request: A `DateCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func date_command(
            request: DateCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "datetime_command" method.
        ///
        /// - Parameters:
        ///   - request: A `DateTimeCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func datetime_command(
            request: DateTimeCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "fan_command" method.
        ///
        /// - Parameters:
        ///   - request: A `FanCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func fan_command(
            request: FanCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "light_command" method.
        ///
        /// - Parameters:
        ///   - request: A `LightCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func light_command(
            request: LightCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "lock_command" method.
        ///
        /// - Parameters:
        ///   - request: A `LockCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func lock_command(
            request: LockCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "media_player_command" method.
        ///
        /// - Parameters:
        ///   - request: A `MediaPlayerCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func media_player_command(
            request: MediaPlayerCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "number_command" method.
        ///
        /// - Parameters:
        ///   - request: A `NumberCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func number_command(
            request: NumberCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "select_command" method.
        ///
        /// - Parameters:
        ///   - request: A `SelectCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func select_command(
            request: SelectCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "siren_command" method.
        ///
        /// - Parameters:
        ///   - request: A `SirenCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func siren_command(
            request: SirenCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "switch_command" method.
        ///
        /// - Parameters:
        ///   - request: A `SwitchCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func switch_command(
            request: SwitchCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "text_command" method.
        ///
        /// - Parameters:
        ///   - request: A `TextCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func text_command(
            request: TextCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "time_command" method.
        ///
        /// - Parameters:
        ///   - request: A `TimeCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func time_command(
            request: TimeCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "update_command" method.
        ///
        /// - Parameters:
        ///   - request: A `UpdateCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func update_command(
            request: UpdateCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "valve_command" method.
        ///
        /// - Parameters:
        ///   - request: A `ValveCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func valve_command(
            request: ValveCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func subscribe_bluetooth_le_advertisements(
            request: SubscribeBluetoothLEAdvertisementsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_device_request" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothDeviceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_device_request(
            request: BluetoothDeviceRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_gatt_get_services" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothGATTGetServicesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_gatt_get_services(
            request: BluetoothGATTGetServicesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_gatt_read" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothGATTReadRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_gatt_read(
            request: BluetoothGATTReadRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_gatt_write" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothGATTWriteRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_gatt_write(
            request: BluetoothGATTWriteRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_gatt_read_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothGATTReadDescriptorRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_gatt_read_descriptor(
            request: BluetoothGATTReadDescriptorRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_gatt_write_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothGATTWriteDescriptorRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_gatt_write_descriptor(
            request: BluetoothGATTWriteDescriptorRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_gatt_notify" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothGATTNotifyRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_gatt_notify(
            request: BluetoothGATTNotifyRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_bluetooth_connections_free" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeBluetoothConnectionsFreeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `BluetoothConnectionsFreeResponse` to respond with.
        func subscribe_bluetooth_connections_free(
            request: SubscribeBluetoothConnectionsFreeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> BluetoothConnectionsFreeResponse

        /// Handle the "unsubscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A `UnsubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func unsubscribe_bluetooth_le_advertisements(
            request: UnsubscribeBluetoothLEAdvertisementsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "bluetooth_scanner_set_mode" method.
        ///
        /// - Parameters:
        ///   - request: A `BluetoothScannerSetModeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func bluetooth_scanner_set_mode(
            request: BluetoothScannerSetModeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "subscribe_voice_assistant" method.
        ///
        /// - Parameters:
        ///   - request: A `SubscribeVoiceAssistantRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func subscribe_voice_assistant(
            request: SubscribeVoiceAssistantRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "voice_assistant_get_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A `VoiceAssistantConfigurationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `VoiceAssistantConfigurationResponse` to respond with.
        func voice_assistant_get_configuration(
            request: VoiceAssistantConfigurationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> VoiceAssistantConfigurationResponse

        /// Handle the "voice_assistant_set_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A `VoiceAssistantSetConfiguration` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func voice_assistant_set_configuration(
            request: VoiceAssistantSetConfiguration,
            context: GRPCCore.ServerContext
        ) async throws -> void

        /// Handle the "alarm_control_panel_command" method.
        ///
        /// - Parameters:
        ///   - request: A `AlarmControlPanelCommandRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `void` to respond with.
        func alarm_control_panel_command(
            request: AlarmControlPanelCommandRequest,
            context: GRPCCore.ServerContext
        ) async throws -> void
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: APIConnection.Method.hello.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<HelloRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<HelloResponse>(),
            handler: { request, context in
                try await self.hello(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.connect.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ConnectRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ConnectResponse>(),
            handler: { request, context in
                try await self.connect(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.disconnect.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<DisconnectRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<DisconnectResponse>(),
            handler: { request, context in
                try await self.disconnect(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.ping.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<PingRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<PingResponse>(),
            handler: { request, context in
                try await self.ping(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.device_info.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<DeviceInfoRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<DeviceInfoResponse>(),
            handler: { request, context in
                try await self.device_info(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.list_entities.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ListEntitiesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.list_entities(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_states.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeStatesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.subscribe_states(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_logs.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeLogsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.subscribe_logs(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_homeassistant_services.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeHomeassistantServicesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.subscribe_homeassistant_services(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_home_assistant_states.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeHomeAssistantStatesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.subscribe_home_assistant_states(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.get_time.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<GetTimeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<GetTimeResponse>(),
            handler: { request, context in
                try await self.get_time(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.execute_service.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ExecuteServiceRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.execute_service(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.noise_encryption_set_key.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<NoiseEncryptionSetKeyRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<NoiseEncryptionSetKeyResponse>(),
            handler: { request, context in
                try await self.noise_encryption_set_key(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.button_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ButtonCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.button_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.camera_image.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<CameraImageRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.camera_image(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.climate_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClimateCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.climate_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.cover_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<CoverCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.cover_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.date_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<DateCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.date_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.datetime_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<DateTimeCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.datetime_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.fan_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<FanCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.fan_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.light_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<LightCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.light_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.lock_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<LockCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.lock_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.media_player_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<MediaPlayerCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.media_player_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.number_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<NumberCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.number_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.select_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SelectCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.select_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.siren_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SirenCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.siren_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.switch_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwitchCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.switch_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.text_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<TextCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.text_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.time_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<TimeCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.time_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.update_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<UpdateCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.update_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.valve_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ValveCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.valve_command(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_bluetooth_le_advertisements.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeBluetoothLEAdvertisementsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.subscribe_bluetooth_le_advertisements(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_device_request.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothDeviceRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_device_request(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_gatt_get_services.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothGATTGetServicesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_gatt_get_services(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_gatt_read.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothGATTReadRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_gatt_read(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_gatt_write.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothGATTWriteRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_gatt_write(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_gatt_read_descriptor.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothGATTReadDescriptorRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_gatt_read_descriptor(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_gatt_write_descriptor.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothGATTWriteDescriptorRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_gatt_write_descriptor(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_gatt_notify.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothGATTNotifyRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_gatt_notify(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_bluetooth_connections_free.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeBluetoothConnectionsFreeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothConnectionsFreeResponse>(),
            handler: { request, context in
                try await self.subscribe_bluetooth_connections_free(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.unsubscribe_bluetooth_le_advertisements.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<UnsubscribeBluetoothLEAdvertisementsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.unsubscribe_bluetooth_le_advertisements(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.bluetooth_scanner_set_mode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothScannerSetModeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.bluetooth_scanner_set_mode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.subscribe_voice_assistant.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SubscribeVoiceAssistantRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.subscribe_voice_assistant(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.voice_assistant_get_configuration.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<VoiceAssistantConfigurationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<VoiceAssistantConfigurationResponse>(),
            handler: { request, context in
                try await self.voice_assistant_get_configuration(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.voice_assistant_set_configuration.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<VoiceAssistantSetConfiguration>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.voice_assistant_set_configuration(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: APIConnection.Method.alarm_control_panel_command.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<AlarmControlPanelCommandRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<void>(),
            handler: { request, context in
                try await self.alarm_control_panel_command(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection.ServiceProtocol {
    internal func hello(
        request: GRPCCore.StreamingServerRequest<HelloRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<HelloResponse> {
        let response = try await self.hello(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func connect(
        request: GRPCCore.StreamingServerRequest<ConnectRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ConnectResponse> {
        let response = try await self.connect(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func disconnect(
        request: GRPCCore.StreamingServerRequest<DisconnectRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<DisconnectResponse> {
        let response = try await self.disconnect(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func ping(
        request: GRPCCore.StreamingServerRequest<PingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<PingResponse> {
        let response = try await self.ping(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func device_info(
        request: GRPCCore.StreamingServerRequest<DeviceInfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<DeviceInfoResponse> {
        let response = try await self.device_info(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func list_entities(
        request: GRPCCore.StreamingServerRequest<ListEntitiesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.list_entities(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_states(
        request: GRPCCore.StreamingServerRequest<SubscribeStatesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.subscribe_states(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_logs(
        request: GRPCCore.StreamingServerRequest<SubscribeLogsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.subscribe_logs(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_homeassistant_services(
        request: GRPCCore.StreamingServerRequest<SubscribeHomeassistantServicesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.subscribe_homeassistant_services(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_home_assistant_states(
        request: GRPCCore.StreamingServerRequest<SubscribeHomeAssistantStatesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.subscribe_home_assistant_states(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func get_time(
        request: GRPCCore.StreamingServerRequest<GetTimeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<GetTimeResponse> {
        let response = try await self.get_time(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func execute_service(
        request: GRPCCore.StreamingServerRequest<ExecuteServiceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.execute_service(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func noise_encryption_set_key(
        request: GRPCCore.StreamingServerRequest<NoiseEncryptionSetKeyRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<NoiseEncryptionSetKeyResponse> {
        let response = try await self.noise_encryption_set_key(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func button_command(
        request: GRPCCore.StreamingServerRequest<ButtonCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.button_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func camera_image(
        request: GRPCCore.StreamingServerRequest<CameraImageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.camera_image(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func climate_command(
        request: GRPCCore.StreamingServerRequest<ClimateCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.climate_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func cover_command(
        request: GRPCCore.StreamingServerRequest<CoverCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.cover_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func date_command(
        request: GRPCCore.StreamingServerRequest<DateCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.date_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func datetime_command(
        request: GRPCCore.StreamingServerRequest<DateTimeCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.datetime_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func fan_command(
        request: GRPCCore.StreamingServerRequest<FanCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.fan_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func light_command(
        request: GRPCCore.StreamingServerRequest<LightCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.light_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func lock_command(
        request: GRPCCore.StreamingServerRequest<LockCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.lock_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func media_player_command(
        request: GRPCCore.StreamingServerRequest<MediaPlayerCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.media_player_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func number_command(
        request: GRPCCore.StreamingServerRequest<NumberCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.number_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func select_command(
        request: GRPCCore.StreamingServerRequest<SelectCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.select_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func siren_command(
        request: GRPCCore.StreamingServerRequest<SirenCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.siren_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func switch_command(
        request: GRPCCore.StreamingServerRequest<SwitchCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.switch_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func text_command(
        request: GRPCCore.StreamingServerRequest<TextCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.text_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func time_command(
        request: GRPCCore.StreamingServerRequest<TimeCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.time_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func update_command(
        request: GRPCCore.StreamingServerRequest<UpdateCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.update_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func valve_command(
        request: GRPCCore.StreamingServerRequest<ValveCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.valve_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_bluetooth_le_advertisements(
        request: GRPCCore.StreamingServerRequest<SubscribeBluetoothLEAdvertisementsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.subscribe_bluetooth_le_advertisements(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_device_request(
        request: GRPCCore.StreamingServerRequest<BluetoothDeviceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_device_request(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_gatt_get_services(
        request: GRPCCore.StreamingServerRequest<BluetoothGATTGetServicesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_gatt_get_services(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_gatt_read(
        request: GRPCCore.StreamingServerRequest<BluetoothGATTReadRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_gatt_read(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_gatt_write(
        request: GRPCCore.StreamingServerRequest<BluetoothGATTWriteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_gatt_write(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_gatt_read_descriptor(
        request: GRPCCore.StreamingServerRequest<BluetoothGATTReadDescriptorRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_gatt_read_descriptor(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_gatt_write_descriptor(
        request: GRPCCore.StreamingServerRequest<BluetoothGATTWriteDescriptorRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_gatt_write_descriptor(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_gatt_notify(
        request: GRPCCore.StreamingServerRequest<BluetoothGATTNotifyRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_gatt_notify(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_bluetooth_connections_free(
        request: GRPCCore.StreamingServerRequest<SubscribeBluetoothConnectionsFreeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<BluetoothConnectionsFreeResponse> {
        let response = try await self.subscribe_bluetooth_connections_free(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func unsubscribe_bluetooth_le_advertisements(
        request: GRPCCore.StreamingServerRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.unsubscribe_bluetooth_le_advertisements(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func bluetooth_scanner_set_mode(
        request: GRPCCore.StreamingServerRequest<BluetoothScannerSetModeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.bluetooth_scanner_set_mode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func subscribe_voice_assistant(
        request: GRPCCore.StreamingServerRequest<SubscribeVoiceAssistantRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.subscribe_voice_assistant(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func voice_assistant_get_configuration(
        request: GRPCCore.StreamingServerRequest<VoiceAssistantConfigurationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<VoiceAssistantConfigurationResponse> {
        let response = try await self.voice_assistant_get_configuration(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func voice_assistant_set_configuration(
        request: GRPCCore.StreamingServerRequest<VoiceAssistantSetConfiguration>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.voice_assistant_set_configuration(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func alarm_control_panel_command(
        request: GRPCCore.StreamingServerRequest<AlarmControlPanelCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<void> {
        let response = try await self.alarm_control_panel_command(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection.SimpleServiceProtocol {
    internal func hello(
        request: GRPCCore.ServerRequest<HelloRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<HelloResponse> {
        return GRPCCore.ServerResponse<HelloResponse>(
            message: try await self.hello(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func connect(
        request: GRPCCore.ServerRequest<ConnectRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ConnectResponse> {
        return GRPCCore.ServerResponse<ConnectResponse>(
            message: try await self.connect(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func disconnect(
        request: GRPCCore.ServerRequest<DisconnectRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<DisconnectResponse> {
        return GRPCCore.ServerResponse<DisconnectResponse>(
            message: try await self.disconnect(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func ping(
        request: GRPCCore.ServerRequest<PingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<PingResponse> {
        return GRPCCore.ServerResponse<PingResponse>(
            message: try await self.ping(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func device_info(
        request: GRPCCore.ServerRequest<DeviceInfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<DeviceInfoResponse> {
        return GRPCCore.ServerResponse<DeviceInfoResponse>(
            message: try await self.device_info(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func list_entities(
        request: GRPCCore.ServerRequest<ListEntitiesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.list_entities(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_states(
        request: GRPCCore.ServerRequest<SubscribeStatesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.subscribe_states(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_logs(
        request: GRPCCore.ServerRequest<SubscribeLogsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.subscribe_logs(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_homeassistant_services(
        request: GRPCCore.ServerRequest<SubscribeHomeassistantServicesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.subscribe_homeassistant_services(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_home_assistant_states(
        request: GRPCCore.ServerRequest<SubscribeHomeAssistantStatesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.subscribe_home_assistant_states(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func get_time(
        request: GRPCCore.ServerRequest<GetTimeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<GetTimeResponse> {
        return GRPCCore.ServerResponse<GetTimeResponse>(
            message: try await self.get_time(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func execute_service(
        request: GRPCCore.ServerRequest<ExecuteServiceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.execute_service(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func noise_encryption_set_key(
        request: GRPCCore.ServerRequest<NoiseEncryptionSetKeyRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<NoiseEncryptionSetKeyResponse> {
        return GRPCCore.ServerResponse<NoiseEncryptionSetKeyResponse>(
            message: try await self.noise_encryption_set_key(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func button_command(
        request: GRPCCore.ServerRequest<ButtonCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.button_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func camera_image(
        request: GRPCCore.ServerRequest<CameraImageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.camera_image(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func climate_command(
        request: GRPCCore.ServerRequest<ClimateCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.climate_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func cover_command(
        request: GRPCCore.ServerRequest<CoverCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.cover_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func date_command(
        request: GRPCCore.ServerRequest<DateCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.date_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func datetime_command(
        request: GRPCCore.ServerRequest<DateTimeCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.datetime_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func fan_command(
        request: GRPCCore.ServerRequest<FanCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.fan_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func light_command(
        request: GRPCCore.ServerRequest<LightCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.light_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func lock_command(
        request: GRPCCore.ServerRequest<LockCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.lock_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func media_player_command(
        request: GRPCCore.ServerRequest<MediaPlayerCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.media_player_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func number_command(
        request: GRPCCore.ServerRequest<NumberCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.number_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func select_command(
        request: GRPCCore.ServerRequest<SelectCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.select_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func siren_command(
        request: GRPCCore.ServerRequest<SirenCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.siren_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func switch_command(
        request: GRPCCore.ServerRequest<SwitchCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.switch_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func text_command(
        request: GRPCCore.ServerRequest<TextCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.text_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func time_command(
        request: GRPCCore.ServerRequest<TimeCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.time_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func update_command(
        request: GRPCCore.ServerRequest<UpdateCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.update_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func valve_command(
        request: GRPCCore.ServerRequest<ValveCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.valve_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_bluetooth_le_advertisements(
        request: GRPCCore.ServerRequest<SubscribeBluetoothLEAdvertisementsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.subscribe_bluetooth_le_advertisements(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_device_request(
        request: GRPCCore.ServerRequest<BluetoothDeviceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_device_request(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_gatt_get_services(
        request: GRPCCore.ServerRequest<BluetoothGATTGetServicesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_gatt_get_services(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_gatt_read(
        request: GRPCCore.ServerRequest<BluetoothGATTReadRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_gatt_read(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_gatt_write(
        request: GRPCCore.ServerRequest<BluetoothGATTWriteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_gatt_write(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_gatt_read_descriptor(
        request: GRPCCore.ServerRequest<BluetoothGATTReadDescriptorRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_gatt_read_descriptor(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_gatt_write_descriptor(
        request: GRPCCore.ServerRequest<BluetoothGATTWriteDescriptorRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_gatt_write_descriptor(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_gatt_notify(
        request: GRPCCore.ServerRequest<BluetoothGATTNotifyRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_gatt_notify(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_bluetooth_connections_free(
        request: GRPCCore.ServerRequest<SubscribeBluetoothConnectionsFreeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<BluetoothConnectionsFreeResponse> {
        return GRPCCore.ServerResponse<BluetoothConnectionsFreeResponse>(
            message: try await self.subscribe_bluetooth_connections_free(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func unsubscribe_bluetooth_le_advertisements(
        request: GRPCCore.ServerRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.unsubscribe_bluetooth_le_advertisements(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func bluetooth_scanner_set_mode(
        request: GRPCCore.ServerRequest<BluetoothScannerSetModeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.bluetooth_scanner_set_mode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func subscribe_voice_assistant(
        request: GRPCCore.ServerRequest<SubscribeVoiceAssistantRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.subscribe_voice_assistant(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func voice_assistant_get_configuration(
        request: GRPCCore.ServerRequest<VoiceAssistantConfigurationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<VoiceAssistantConfigurationResponse> {
        return GRPCCore.ServerResponse<VoiceAssistantConfigurationResponse>(
            message: try await self.voice_assistant_get_configuration(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func voice_assistant_set_configuration(
        request: GRPCCore.ServerRequest<VoiceAssistantSetConfiguration>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.voice_assistant_set_configuration(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func alarm_control_panel_command(
        request: GRPCCore.ServerRequest<AlarmControlPanelCommandRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<void> {
        return GRPCCore.ServerResponse<void>(
            message: try await self.alarm_control_panel_command(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: APIConnection (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection {
    /// Generated client protocol for the "APIConnection" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "hello" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `HelloRequest` message.
        ///   - serializer: A serializer for `HelloRequest` messages.
        ///   - deserializer: A deserializer for `HelloResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func hello<Result>(
            request: GRPCCore.ClientRequest<HelloRequest>,
            serializer: some GRPCCore.MessageSerializer<HelloRequest>,
            deserializer: some GRPCCore.MessageDeserializer<HelloResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<HelloResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "connect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ConnectRequest` message.
        ///   - serializer: A serializer for `ConnectRequest` messages.
        ///   - deserializer: A deserializer for `ConnectResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func connect<Result>(
            request: GRPCCore.ClientRequest<ConnectRequest>,
            serializer: some GRPCCore.MessageSerializer<ConnectRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ConnectResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ConnectResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "disconnect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DisconnectRequest` message.
        ///   - serializer: A serializer for `DisconnectRequest` messages.
        ///   - deserializer: A deserializer for `DisconnectResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func disconnect<Result>(
            request: GRPCCore.ClientRequest<DisconnectRequest>,
            serializer: some GRPCCore.MessageSerializer<DisconnectRequest>,
            deserializer: some GRPCCore.MessageDeserializer<DisconnectResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DisconnectResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ping" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `PingRequest` message.
        ///   - serializer: A serializer for `PingRequest` messages.
        ///   - deserializer: A deserializer for `PingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func ping<Result>(
            request: GRPCCore.ClientRequest<PingRequest>,
            serializer: some GRPCCore.MessageSerializer<PingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<PingResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<PingResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "device_info" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DeviceInfoRequest` message.
        ///   - serializer: A serializer for `DeviceInfoRequest` messages.
        ///   - deserializer: A deserializer for `DeviceInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func device_info<Result>(
            request: GRPCCore.ClientRequest<DeviceInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<DeviceInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<DeviceInfoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DeviceInfoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "list_entities" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ListEntitiesRequest` message.
        ///   - serializer: A serializer for `ListEntitiesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list_entities<Result>(
            request: GRPCCore.ClientRequest<ListEntitiesRequest>,
            serializer: some GRPCCore.MessageSerializer<ListEntitiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_states" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeStatesRequest` message.
        ///   - serializer: A serializer for `SubscribeStatesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_states<Result>(
            request: GRPCCore.ClientRequest<SubscribeStatesRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeStatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_logs" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeLogsRequest` message.
        ///   - serializer: A serializer for `SubscribeLogsRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_logs<Result>(
            request: GRPCCore.ClientRequest<SubscribeLogsRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeLogsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_homeassistant_services" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeHomeassistantServicesRequest` message.
        ///   - serializer: A serializer for `SubscribeHomeassistantServicesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_homeassistant_services<Result>(
            request: GRPCCore.ClientRequest<SubscribeHomeassistantServicesRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeHomeassistantServicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_home_assistant_states" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeHomeAssistantStatesRequest` message.
        ///   - serializer: A serializer for `SubscribeHomeAssistantStatesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_home_assistant_states<Result>(
            request: GRPCCore.ClientRequest<SubscribeHomeAssistantStatesRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeHomeAssistantStatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "get_time" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `GetTimeRequest` message.
        ///   - serializer: A serializer for `GetTimeRequest` messages.
        ///   - deserializer: A deserializer for `GetTimeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func get_time<Result>(
            request: GRPCCore.ClientRequest<GetTimeRequest>,
            serializer: some GRPCCore.MessageSerializer<GetTimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<GetTimeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<GetTimeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "execute_service" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ExecuteServiceRequest` message.
        ///   - serializer: A serializer for `ExecuteServiceRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func execute_service<Result>(
            request: GRPCCore.ClientRequest<ExecuteServiceRequest>,
            serializer: some GRPCCore.MessageSerializer<ExecuteServiceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "noise_encryption_set_key" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `NoiseEncryptionSetKeyRequest` message.
        ///   - serializer: A serializer for `NoiseEncryptionSetKeyRequest` messages.
        ///   - deserializer: A deserializer for `NoiseEncryptionSetKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func noise_encryption_set_key<Result>(
            request: GRPCCore.ClientRequest<NoiseEncryptionSetKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<NoiseEncryptionSetKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<NoiseEncryptionSetKeyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<NoiseEncryptionSetKeyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "button_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ButtonCommandRequest` message.
        ///   - serializer: A serializer for `ButtonCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func button_command<Result>(
            request: GRPCCore.ClientRequest<ButtonCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<ButtonCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "camera_image" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CameraImageRequest` message.
        ///   - serializer: A serializer for `CameraImageRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func camera_image<Result>(
            request: GRPCCore.ClientRequest<CameraImageRequest>,
            serializer: some GRPCCore.MessageSerializer<CameraImageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "climate_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClimateCommandRequest` message.
        ///   - serializer: A serializer for `ClimateCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func climate_command<Result>(
            request: GRPCCore.ClientRequest<ClimateCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<ClimateCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "cover_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CoverCommandRequest` message.
        ///   - serializer: A serializer for `CoverCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cover_command<Result>(
            request: GRPCCore.ClientRequest<CoverCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<CoverCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "date_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DateCommandRequest` message.
        ///   - serializer: A serializer for `DateCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func date_command<Result>(
            request: GRPCCore.ClientRequest<DateCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<DateCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "datetime_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DateTimeCommandRequest` message.
        ///   - serializer: A serializer for `DateTimeCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func datetime_command<Result>(
            request: GRPCCore.ClientRequest<DateTimeCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<DateTimeCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "fan_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `FanCommandRequest` message.
        ///   - serializer: A serializer for `FanCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func fan_command<Result>(
            request: GRPCCore.ClientRequest<FanCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<FanCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "light_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LightCommandRequest` message.
        ///   - serializer: A serializer for `LightCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func light_command<Result>(
            request: GRPCCore.ClientRequest<LightCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<LightCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "lock_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LockCommandRequest` message.
        ///   - serializer: A serializer for `LockCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func lock_command<Result>(
            request: GRPCCore.ClientRequest<LockCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<LockCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "media_player_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `MediaPlayerCommandRequest` message.
        ///   - serializer: A serializer for `MediaPlayerCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func media_player_command<Result>(
            request: GRPCCore.ClientRequest<MediaPlayerCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<MediaPlayerCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "number_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `NumberCommandRequest` message.
        ///   - serializer: A serializer for `NumberCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func number_command<Result>(
            request: GRPCCore.ClientRequest<NumberCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<NumberCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "select_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SelectCommandRequest` message.
        ///   - serializer: A serializer for `SelectCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func select_command<Result>(
            request: GRPCCore.ClientRequest<SelectCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<SelectCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "siren_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SirenCommandRequest` message.
        ///   - serializer: A serializer for `SirenCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func siren_command<Result>(
            request: GRPCCore.ClientRequest<SirenCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<SirenCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "switch_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwitchCommandRequest` message.
        ///   - serializer: A serializer for `SwitchCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func switch_command<Result>(
            request: GRPCCore.ClientRequest<SwitchCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<SwitchCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "text_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TextCommandRequest` message.
        ///   - serializer: A serializer for `TextCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func text_command<Result>(
            request: GRPCCore.ClientRequest<TextCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<TextCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "time_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TimeCommandRequest` message.
        ///   - serializer: A serializer for `TimeCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func time_command<Result>(
            request: GRPCCore.ClientRequest<TimeCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<TimeCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "update_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UpdateCommandRequest` message.
        ///   - serializer: A serializer for `UpdateCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update_command<Result>(
            request: GRPCCore.ClientRequest<UpdateCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<UpdateCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "valve_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ValveCommandRequest` message.
        ///   - serializer: A serializer for `ValveCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func valve_command<Result>(
            request: GRPCCore.ClientRequest<ValveCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<ValveCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - serializer: A serializer for `SubscribeBluetoothLEAdvertisementsRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_bluetooth_le_advertisements<Result>(
            request: GRPCCore.ClientRequest<SubscribeBluetoothLEAdvertisementsRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeBluetoothLEAdvertisementsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_device_request" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothDeviceRequest` message.
        ///   - serializer: A serializer for `BluetoothDeviceRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_device_request<Result>(
            request: GRPCCore.ClientRequest<BluetoothDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_gatt_get_services" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTGetServicesRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTGetServicesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_gatt_get_services<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTGetServicesRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTGetServicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_gatt_read" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTReadRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTReadRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_gatt_read<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTReadRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTReadRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_gatt_write" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTWriteRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTWriteRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_gatt_write<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTWriteRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTWriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_gatt_read_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTReadDescriptorRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTReadDescriptorRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_gatt_read_descriptor<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTReadDescriptorRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTReadDescriptorRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_gatt_write_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTWriteDescriptorRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTWriteDescriptorRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_gatt_write_descriptor<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTWriteDescriptorRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTWriteDescriptorRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_gatt_notify" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTNotifyRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTNotifyRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_gatt_notify<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTNotifyRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTNotifyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_bluetooth_connections_free" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeBluetoothConnectionsFreeRequest` message.
        ///   - serializer: A serializer for `SubscribeBluetoothConnectionsFreeRequest` messages.
        ///   - deserializer: A deserializer for `BluetoothConnectionsFreeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_bluetooth_connections_free<Result>(
            request: GRPCCore.ClientRequest<SubscribeBluetoothConnectionsFreeRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeBluetoothConnectionsFreeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<BluetoothConnectionsFreeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BluetoothConnectionsFreeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "unsubscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UnsubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - serializer: A serializer for `UnsubscribeBluetoothLEAdvertisementsRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unsubscribe_bluetooth_le_advertisements<Result>(
            request: GRPCCore.ClientRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
            serializer: some GRPCCore.MessageSerializer<UnsubscribeBluetoothLEAdvertisementsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "bluetooth_scanner_set_mode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothScannerSetModeRequest` message.
        ///   - serializer: A serializer for `BluetoothScannerSetModeRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bluetooth_scanner_set_mode<Result>(
            request: GRPCCore.ClientRequest<BluetoothScannerSetModeRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothScannerSetModeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "subscribe_voice_assistant" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeVoiceAssistantRequest` message.
        ///   - serializer: A serializer for `SubscribeVoiceAssistantRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func subscribe_voice_assistant<Result>(
            request: GRPCCore.ClientRequest<SubscribeVoiceAssistantRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeVoiceAssistantRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "voice_assistant_get_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `VoiceAssistantConfigurationRequest` message.
        ///   - serializer: A serializer for `VoiceAssistantConfigurationRequest` messages.
        ///   - deserializer: A deserializer for `VoiceAssistantConfigurationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func voice_assistant_get_configuration<Result>(
            request: GRPCCore.ClientRequest<VoiceAssistantConfigurationRequest>,
            serializer: some GRPCCore.MessageSerializer<VoiceAssistantConfigurationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<VoiceAssistantConfigurationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<VoiceAssistantConfigurationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "voice_assistant_set_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `VoiceAssistantSetConfiguration` message.
        ///   - serializer: A serializer for `VoiceAssistantSetConfiguration` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func voice_assistant_set_configuration<Result>(
            request: GRPCCore.ClientRequest<VoiceAssistantSetConfiguration>,
            serializer: some GRPCCore.MessageSerializer<VoiceAssistantSetConfiguration>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "alarm_control_panel_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AlarmControlPanelCommandRequest` message.
        ///   - serializer: A serializer for `AlarmControlPanelCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func alarm_control_panel_command<Result>(
            request: GRPCCore.ClientRequest<AlarmControlPanelCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<AlarmControlPanelCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "APIConnection" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "hello" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `HelloRequest` message.
        ///   - serializer: A serializer for `HelloRequest` messages.
        ///   - deserializer: A deserializer for `HelloResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func hello<Result>(
            request: GRPCCore.ClientRequest<HelloRequest>,
            serializer: some GRPCCore.MessageSerializer<HelloRequest>,
            deserializer: some GRPCCore.MessageDeserializer<HelloResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<HelloResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.hello.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "connect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ConnectRequest` message.
        ///   - serializer: A serializer for `ConnectRequest` messages.
        ///   - deserializer: A deserializer for `ConnectResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func connect<Result>(
            request: GRPCCore.ClientRequest<ConnectRequest>,
            serializer: some GRPCCore.MessageSerializer<ConnectRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ConnectResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ConnectResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.connect.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "disconnect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DisconnectRequest` message.
        ///   - serializer: A serializer for `DisconnectRequest` messages.
        ///   - deserializer: A deserializer for `DisconnectResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func disconnect<Result>(
            request: GRPCCore.ClientRequest<DisconnectRequest>,
            serializer: some GRPCCore.MessageSerializer<DisconnectRequest>,
            deserializer: some GRPCCore.MessageDeserializer<DisconnectResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DisconnectResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.disconnect.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ping" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `PingRequest` message.
        ///   - serializer: A serializer for `PingRequest` messages.
        ///   - deserializer: A deserializer for `PingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func ping<Result>(
            request: GRPCCore.ClientRequest<PingRequest>,
            serializer: some GRPCCore.MessageSerializer<PingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<PingResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<PingResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.ping.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "device_info" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DeviceInfoRequest` message.
        ///   - serializer: A serializer for `DeviceInfoRequest` messages.
        ///   - deserializer: A deserializer for `DeviceInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func device_info<Result>(
            request: GRPCCore.ClientRequest<DeviceInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<DeviceInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<DeviceInfoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DeviceInfoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.device_info.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "list_entities" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ListEntitiesRequest` message.
        ///   - serializer: A serializer for `ListEntitiesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func list_entities<Result>(
            request: GRPCCore.ClientRequest<ListEntitiesRequest>,
            serializer: some GRPCCore.MessageSerializer<ListEntitiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.list_entities.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_states" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeStatesRequest` message.
        ///   - serializer: A serializer for `SubscribeStatesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_states<Result>(
            request: GRPCCore.ClientRequest<SubscribeStatesRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeStatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_states.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_logs" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeLogsRequest` message.
        ///   - serializer: A serializer for `SubscribeLogsRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_logs<Result>(
            request: GRPCCore.ClientRequest<SubscribeLogsRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeLogsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_logs.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_homeassistant_services" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeHomeassistantServicesRequest` message.
        ///   - serializer: A serializer for `SubscribeHomeassistantServicesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_homeassistant_services<Result>(
            request: GRPCCore.ClientRequest<SubscribeHomeassistantServicesRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeHomeassistantServicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_homeassistant_services.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_home_assistant_states" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeHomeAssistantStatesRequest` message.
        ///   - serializer: A serializer for `SubscribeHomeAssistantStatesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_home_assistant_states<Result>(
            request: GRPCCore.ClientRequest<SubscribeHomeAssistantStatesRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeHomeAssistantStatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_home_assistant_states.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "get_time" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `GetTimeRequest` message.
        ///   - serializer: A serializer for `GetTimeRequest` messages.
        ///   - deserializer: A deserializer for `GetTimeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func get_time<Result>(
            request: GRPCCore.ClientRequest<GetTimeRequest>,
            serializer: some GRPCCore.MessageSerializer<GetTimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<GetTimeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<GetTimeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.get_time.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "execute_service" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ExecuteServiceRequest` message.
        ///   - serializer: A serializer for `ExecuteServiceRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func execute_service<Result>(
            request: GRPCCore.ClientRequest<ExecuteServiceRequest>,
            serializer: some GRPCCore.MessageSerializer<ExecuteServiceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.execute_service.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "noise_encryption_set_key" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `NoiseEncryptionSetKeyRequest` message.
        ///   - serializer: A serializer for `NoiseEncryptionSetKeyRequest` messages.
        ///   - deserializer: A deserializer for `NoiseEncryptionSetKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func noise_encryption_set_key<Result>(
            request: GRPCCore.ClientRequest<NoiseEncryptionSetKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<NoiseEncryptionSetKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<NoiseEncryptionSetKeyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<NoiseEncryptionSetKeyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.noise_encryption_set_key.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "button_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ButtonCommandRequest` message.
        ///   - serializer: A serializer for `ButtonCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func button_command<Result>(
            request: GRPCCore.ClientRequest<ButtonCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<ButtonCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.button_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "camera_image" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CameraImageRequest` message.
        ///   - serializer: A serializer for `CameraImageRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func camera_image<Result>(
            request: GRPCCore.ClientRequest<CameraImageRequest>,
            serializer: some GRPCCore.MessageSerializer<CameraImageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.camera_image.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "climate_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClimateCommandRequest` message.
        ///   - serializer: A serializer for `ClimateCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func climate_command<Result>(
            request: GRPCCore.ClientRequest<ClimateCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<ClimateCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.climate_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "cover_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CoverCommandRequest` message.
        ///   - serializer: A serializer for `CoverCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func cover_command<Result>(
            request: GRPCCore.ClientRequest<CoverCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<CoverCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.cover_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "date_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DateCommandRequest` message.
        ///   - serializer: A serializer for `DateCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func date_command<Result>(
            request: GRPCCore.ClientRequest<DateCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<DateCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.date_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "datetime_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `DateTimeCommandRequest` message.
        ///   - serializer: A serializer for `DateTimeCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func datetime_command<Result>(
            request: GRPCCore.ClientRequest<DateTimeCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<DateTimeCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.datetime_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "fan_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `FanCommandRequest` message.
        ///   - serializer: A serializer for `FanCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func fan_command<Result>(
            request: GRPCCore.ClientRequest<FanCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<FanCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.fan_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "light_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LightCommandRequest` message.
        ///   - serializer: A serializer for `LightCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func light_command<Result>(
            request: GRPCCore.ClientRequest<LightCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<LightCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.light_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "lock_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LockCommandRequest` message.
        ///   - serializer: A serializer for `LockCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func lock_command<Result>(
            request: GRPCCore.ClientRequest<LockCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<LockCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.lock_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "media_player_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `MediaPlayerCommandRequest` message.
        ///   - serializer: A serializer for `MediaPlayerCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func media_player_command<Result>(
            request: GRPCCore.ClientRequest<MediaPlayerCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<MediaPlayerCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.media_player_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "number_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `NumberCommandRequest` message.
        ///   - serializer: A serializer for `NumberCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func number_command<Result>(
            request: GRPCCore.ClientRequest<NumberCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<NumberCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.number_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "select_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SelectCommandRequest` message.
        ///   - serializer: A serializer for `SelectCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func select_command<Result>(
            request: GRPCCore.ClientRequest<SelectCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<SelectCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.select_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "siren_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SirenCommandRequest` message.
        ///   - serializer: A serializer for `SirenCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func siren_command<Result>(
            request: GRPCCore.ClientRequest<SirenCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<SirenCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.siren_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "switch_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwitchCommandRequest` message.
        ///   - serializer: A serializer for `SwitchCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func switch_command<Result>(
            request: GRPCCore.ClientRequest<SwitchCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<SwitchCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.switch_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "text_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TextCommandRequest` message.
        ///   - serializer: A serializer for `TextCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func text_command<Result>(
            request: GRPCCore.ClientRequest<TextCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<TextCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.text_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "time_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `TimeCommandRequest` message.
        ///   - serializer: A serializer for `TimeCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func time_command<Result>(
            request: GRPCCore.ClientRequest<TimeCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<TimeCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.time_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "update_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UpdateCommandRequest` message.
        ///   - serializer: A serializer for `UpdateCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func update_command<Result>(
            request: GRPCCore.ClientRequest<UpdateCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<UpdateCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.update_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "valve_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ValveCommandRequest` message.
        ///   - serializer: A serializer for `ValveCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func valve_command<Result>(
            request: GRPCCore.ClientRequest<ValveCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<ValveCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.valve_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - serializer: A serializer for `SubscribeBluetoothLEAdvertisementsRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_bluetooth_le_advertisements<Result>(
            request: GRPCCore.ClientRequest<SubscribeBluetoothLEAdvertisementsRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeBluetoothLEAdvertisementsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_bluetooth_le_advertisements.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_device_request" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothDeviceRequest` message.
        ///   - serializer: A serializer for `BluetoothDeviceRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_device_request<Result>(
            request: GRPCCore.ClientRequest<BluetoothDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_device_request.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_gatt_get_services" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTGetServicesRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTGetServicesRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_gatt_get_services<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTGetServicesRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTGetServicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_gatt_get_services.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_gatt_read" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTReadRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTReadRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_gatt_read<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTReadRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTReadRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_gatt_read.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_gatt_write" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTWriteRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTWriteRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_gatt_write<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTWriteRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTWriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_gatt_write.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_gatt_read_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTReadDescriptorRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTReadDescriptorRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_gatt_read_descriptor<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTReadDescriptorRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTReadDescriptorRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_gatt_read_descriptor.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_gatt_write_descriptor" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTWriteDescriptorRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTWriteDescriptorRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_gatt_write_descriptor<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTWriteDescriptorRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTWriteDescriptorRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_gatt_write_descriptor.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_gatt_notify" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothGATTNotifyRequest` message.
        ///   - serializer: A serializer for `BluetoothGATTNotifyRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_gatt_notify<Result>(
            request: GRPCCore.ClientRequest<BluetoothGATTNotifyRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothGATTNotifyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_gatt_notify.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_bluetooth_connections_free" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeBluetoothConnectionsFreeRequest` message.
        ///   - serializer: A serializer for `SubscribeBluetoothConnectionsFreeRequest` messages.
        ///   - deserializer: A deserializer for `BluetoothConnectionsFreeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_bluetooth_connections_free<Result>(
            request: GRPCCore.ClientRequest<SubscribeBluetoothConnectionsFreeRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeBluetoothConnectionsFreeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<BluetoothConnectionsFreeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BluetoothConnectionsFreeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_bluetooth_connections_free.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "unsubscribe_bluetooth_le_advertisements" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UnsubscribeBluetoothLEAdvertisementsRequest` message.
        ///   - serializer: A serializer for `UnsubscribeBluetoothLEAdvertisementsRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func unsubscribe_bluetooth_le_advertisements<Result>(
            request: GRPCCore.ClientRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
            serializer: some GRPCCore.MessageSerializer<UnsubscribeBluetoothLEAdvertisementsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.unsubscribe_bluetooth_le_advertisements.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "bluetooth_scanner_set_mode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BluetoothScannerSetModeRequest` message.
        ///   - serializer: A serializer for `BluetoothScannerSetModeRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bluetooth_scanner_set_mode<Result>(
            request: GRPCCore.ClientRequest<BluetoothScannerSetModeRequest>,
            serializer: some GRPCCore.MessageSerializer<BluetoothScannerSetModeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.bluetooth_scanner_set_mode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "subscribe_voice_assistant" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SubscribeVoiceAssistantRequest` message.
        ///   - serializer: A serializer for `SubscribeVoiceAssistantRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func subscribe_voice_assistant<Result>(
            request: GRPCCore.ClientRequest<SubscribeVoiceAssistantRequest>,
            serializer: some GRPCCore.MessageSerializer<SubscribeVoiceAssistantRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.subscribe_voice_assistant.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "voice_assistant_get_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `VoiceAssistantConfigurationRequest` message.
        ///   - serializer: A serializer for `VoiceAssistantConfigurationRequest` messages.
        ///   - deserializer: A deserializer for `VoiceAssistantConfigurationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func voice_assistant_get_configuration<Result>(
            request: GRPCCore.ClientRequest<VoiceAssistantConfigurationRequest>,
            serializer: some GRPCCore.MessageSerializer<VoiceAssistantConfigurationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<VoiceAssistantConfigurationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<VoiceAssistantConfigurationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.voice_assistant_get_configuration.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "voice_assistant_set_configuration" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `VoiceAssistantSetConfiguration` message.
        ///   - serializer: A serializer for `VoiceAssistantSetConfiguration` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func voice_assistant_set_configuration<Result>(
            request: GRPCCore.ClientRequest<VoiceAssistantSetConfiguration>,
            serializer: some GRPCCore.MessageSerializer<VoiceAssistantSetConfiguration>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.voice_assistant_set_configuration.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "alarm_control_panel_command" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AlarmControlPanelCommandRequest` message.
        ///   - serializer: A serializer for `AlarmControlPanelCommandRequest` messages.
        ///   - deserializer: A deserializer for `void` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func alarm_control_panel_command<Result>(
            request: GRPCCore.ClientRequest<AlarmControlPanelCommandRequest>,
            serializer: some GRPCCore.MessageSerializer<AlarmControlPanelCommandRequest>,
            deserializer: some GRPCCore.MessageDeserializer<void>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: APIConnection.Method.alarm_control_panel_command.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection.ClientProtocol {
    /// Call the "hello" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `HelloRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func hello<Result>(
        request: GRPCCore.ClientRequest<HelloRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<HelloResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.hello(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<HelloRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<HelloResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "connect" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ConnectRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func connect<Result>(
        request: GRPCCore.ClientRequest<ConnectRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ConnectResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.connect(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ConnectRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ConnectResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "disconnect" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `DisconnectRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func disconnect<Result>(
        request: GRPCCore.ClientRequest<DisconnectRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DisconnectResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.disconnect(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<DisconnectRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<DisconnectResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ping" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `PingRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func ping<Result>(
        request: GRPCCore.ClientRequest<PingRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<PingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.ping(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<PingRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<PingResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "device_info" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `DeviceInfoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func device_info<Result>(
        request: GRPCCore.ClientRequest<DeviceInfoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DeviceInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.device_info(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<DeviceInfoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<DeviceInfoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "list_entities" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ListEntitiesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func list_entities<Result>(
        request: GRPCCore.ClientRequest<ListEntitiesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list_entities(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ListEntitiesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_states" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeStatesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_states<Result>(
        request: GRPCCore.ClientRequest<SubscribeStatesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_states(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeStatesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_logs" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeLogsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_logs<Result>(
        request: GRPCCore.ClientRequest<SubscribeLogsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_logs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeLogsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_homeassistant_services" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeHomeassistantServicesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_homeassistant_services<Result>(
        request: GRPCCore.ClientRequest<SubscribeHomeassistantServicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_homeassistant_services(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeHomeassistantServicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_home_assistant_states" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeHomeAssistantStatesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_home_assistant_states<Result>(
        request: GRPCCore.ClientRequest<SubscribeHomeAssistantStatesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_home_assistant_states(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeHomeAssistantStatesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "get_time" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `GetTimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func get_time<Result>(
        request: GRPCCore.ClientRequest<GetTimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<GetTimeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.get_time(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<GetTimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<GetTimeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "execute_service" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ExecuteServiceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func execute_service<Result>(
        request: GRPCCore.ClientRequest<ExecuteServiceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.execute_service(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ExecuteServiceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "noise_encryption_set_key" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `NoiseEncryptionSetKeyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func noise_encryption_set_key<Result>(
        request: GRPCCore.ClientRequest<NoiseEncryptionSetKeyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<NoiseEncryptionSetKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.noise_encryption_set_key(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<NoiseEncryptionSetKeyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<NoiseEncryptionSetKeyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "button_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ButtonCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func button_command<Result>(
        request: GRPCCore.ClientRequest<ButtonCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.button_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ButtonCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "camera_image" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CameraImageRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func camera_image<Result>(
        request: GRPCCore.ClientRequest<CameraImageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.camera_image(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CameraImageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "climate_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ClimateCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func climate_command<Result>(
        request: GRPCCore.ClientRequest<ClimateCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.climate_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ClimateCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cover_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CoverCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cover_command<Result>(
        request: GRPCCore.ClientRequest<CoverCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cover_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CoverCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "date_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `DateCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func date_command<Result>(
        request: GRPCCore.ClientRequest<DateCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.date_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<DateCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "datetime_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `DateTimeCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func datetime_command<Result>(
        request: GRPCCore.ClientRequest<DateTimeCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.datetime_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<DateTimeCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "fan_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `FanCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func fan_command<Result>(
        request: GRPCCore.ClientRequest<FanCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.fan_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<FanCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "light_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `LightCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func light_command<Result>(
        request: GRPCCore.ClientRequest<LightCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.light_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<LightCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "lock_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `LockCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func lock_command<Result>(
        request: GRPCCore.ClientRequest<LockCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.lock_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<LockCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "media_player_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `MediaPlayerCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func media_player_command<Result>(
        request: GRPCCore.ClientRequest<MediaPlayerCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.media_player_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<MediaPlayerCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "number_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `NumberCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func number_command<Result>(
        request: GRPCCore.ClientRequest<NumberCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.number_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<NumberCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "select_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SelectCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func select_command<Result>(
        request: GRPCCore.ClientRequest<SelectCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.select_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SelectCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "siren_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SirenCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func siren_command<Result>(
        request: GRPCCore.ClientRequest<SirenCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.siren_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SirenCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "switch_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SwitchCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func switch_command<Result>(
        request: GRPCCore.ClientRequest<SwitchCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.switch_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SwitchCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "text_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `TextCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func text_command<Result>(
        request: GRPCCore.ClientRequest<TextCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.text_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<TextCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "time_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `TimeCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func time_command<Result>(
        request: GRPCCore.ClientRequest<TimeCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.time_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<TimeCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "update_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `UpdateCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func update_command<Result>(
        request: GRPCCore.ClientRequest<UpdateCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<UpdateCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "valve_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ValveCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func valve_command<Result>(
        request: GRPCCore.ClientRequest<ValveCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.valve_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ValveCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_bluetooth_le_advertisements" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeBluetoothLEAdvertisementsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_bluetooth_le_advertisements<Result>(
        request: GRPCCore.ClientRequest<SubscribeBluetoothLEAdvertisementsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_bluetooth_le_advertisements(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeBluetoothLEAdvertisementsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_device_request" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_device_request<Result>(
        request: GRPCCore.ClientRequest<BluetoothDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_device_request(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_get_services" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothGATTGetServicesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_get_services<Result>(
        request: GRPCCore.ClientRequest<BluetoothGATTGetServicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_gatt_get_services(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothGATTGetServicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_read" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothGATTReadRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_read<Result>(
        request: GRPCCore.ClientRequest<BluetoothGATTReadRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_gatt_read(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothGATTReadRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_write" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothGATTWriteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_write<Result>(
        request: GRPCCore.ClientRequest<BluetoothGATTWriteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_gatt_write(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothGATTWriteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_read_descriptor" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothGATTReadDescriptorRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_read_descriptor<Result>(
        request: GRPCCore.ClientRequest<BluetoothGATTReadDescriptorRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_gatt_read_descriptor(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothGATTReadDescriptorRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_write_descriptor" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothGATTWriteDescriptorRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_write_descriptor<Result>(
        request: GRPCCore.ClientRequest<BluetoothGATTWriteDescriptorRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_gatt_write_descriptor(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothGATTWriteDescriptorRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_notify" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothGATTNotifyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_notify<Result>(
        request: GRPCCore.ClientRequest<BluetoothGATTNotifyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_gatt_notify(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothGATTNotifyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_bluetooth_connections_free" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeBluetoothConnectionsFreeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_bluetooth_connections_free<Result>(
        request: GRPCCore.ClientRequest<SubscribeBluetoothConnectionsFreeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BluetoothConnectionsFreeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_bluetooth_connections_free(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeBluetoothConnectionsFreeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<BluetoothConnectionsFreeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "unsubscribe_bluetooth_le_advertisements" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `UnsubscribeBluetoothLEAdvertisementsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func unsubscribe_bluetooth_le_advertisements<Result>(
        request: GRPCCore.ClientRequest<UnsubscribeBluetoothLEAdvertisementsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unsubscribe_bluetooth_le_advertisements(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<UnsubscribeBluetoothLEAdvertisementsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_scanner_set_mode" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BluetoothScannerSetModeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_scanner_set_mode<Result>(
        request: GRPCCore.ClientRequest<BluetoothScannerSetModeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bluetooth_scanner_set_mode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BluetoothScannerSetModeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_voice_assistant" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SubscribeVoiceAssistantRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_voice_assistant<Result>(
        request: GRPCCore.ClientRequest<SubscribeVoiceAssistantRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.subscribe_voice_assistant(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SubscribeVoiceAssistantRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "voice_assistant_get_configuration" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `VoiceAssistantConfigurationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func voice_assistant_get_configuration<Result>(
        request: GRPCCore.ClientRequest<VoiceAssistantConfigurationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<VoiceAssistantConfigurationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.voice_assistant_get_configuration(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<VoiceAssistantConfigurationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<VoiceAssistantConfigurationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "voice_assistant_set_configuration" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `VoiceAssistantSetConfiguration` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func voice_assistant_set_configuration<Result>(
        request: GRPCCore.ClientRequest<VoiceAssistantSetConfiguration>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.voice_assistant_set_configuration(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<VoiceAssistantSetConfiguration>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "alarm_control_panel_command" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `AlarmControlPanelCommandRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func alarm_control_panel_command<Result>(
        request: GRPCCore.ClientRequest<AlarmControlPanelCommandRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.alarm_control_panel_command(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<AlarmControlPanelCommandRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<void>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension APIConnection.ClientProtocol {
    /// Call the "hello" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func hello<Result>(
        _ message: HelloRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<HelloResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<HelloRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.hello(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "connect" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func connect<Result>(
        _ message: ConnectRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ConnectResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ConnectRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.connect(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "disconnect" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func disconnect<Result>(
        _ message: DisconnectRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DisconnectResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<DisconnectRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.disconnect(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ping" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func ping<Result>(
        _ message: PingRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<PingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<PingRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.ping(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "device_info" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func device_info<Result>(
        _ message: DeviceInfoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<DeviceInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<DeviceInfoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.device_info(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "list_entities" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func list_entities<Result>(
        _ message: ListEntitiesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ListEntitiesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list_entities(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_states" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_states<Result>(
        _ message: SubscribeStatesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeStatesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_states(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_logs" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_logs<Result>(
        _ message: SubscribeLogsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeLogsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_logs(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_homeassistant_services" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_homeassistant_services<Result>(
        _ message: SubscribeHomeassistantServicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeHomeassistantServicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_homeassistant_services(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_home_assistant_states" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_home_assistant_states<Result>(
        _ message: SubscribeHomeAssistantStatesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeHomeAssistantStatesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_home_assistant_states(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "get_time" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func get_time<Result>(
        _ message: GetTimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<GetTimeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<GetTimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.get_time(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "execute_service" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func execute_service<Result>(
        _ message: ExecuteServiceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ExecuteServiceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.execute_service(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "noise_encryption_set_key" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func noise_encryption_set_key<Result>(
        _ message: NoiseEncryptionSetKeyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<NoiseEncryptionSetKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<NoiseEncryptionSetKeyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.noise_encryption_set_key(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "button_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func button_command<Result>(
        _ message: ButtonCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ButtonCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.button_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "camera_image" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func camera_image<Result>(
        _ message: CameraImageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CameraImageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.camera_image(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "climate_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func climate_command<Result>(
        _ message: ClimateCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ClimateCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.climate_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cover_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func cover_command<Result>(
        _ message: CoverCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CoverCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cover_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "date_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func date_command<Result>(
        _ message: DateCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<DateCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.date_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "datetime_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func datetime_command<Result>(
        _ message: DateTimeCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<DateTimeCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.datetime_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "fan_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func fan_command<Result>(
        _ message: FanCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<FanCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.fan_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "light_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func light_command<Result>(
        _ message: LightCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<LightCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.light_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "lock_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func lock_command<Result>(
        _ message: LockCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<LockCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.lock_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "media_player_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func media_player_command<Result>(
        _ message: MediaPlayerCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<MediaPlayerCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.media_player_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "number_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func number_command<Result>(
        _ message: NumberCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<NumberCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.number_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "select_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func select_command<Result>(
        _ message: SelectCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SelectCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.select_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "siren_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func siren_command<Result>(
        _ message: SirenCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SirenCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.siren_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "switch_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func switch_command<Result>(
        _ message: SwitchCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SwitchCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.switch_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "text_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func text_command<Result>(
        _ message: TextCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<TextCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.text_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "time_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func time_command<Result>(
        _ message: TimeCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<TimeCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.time_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "update_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func update_command<Result>(
        _ message: UpdateCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<UpdateCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "valve_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func valve_command<Result>(
        _ message: ValveCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ValveCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.valve_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_bluetooth_le_advertisements" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_bluetooth_le_advertisements<Result>(
        _ message: SubscribeBluetoothLEAdvertisementsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeBluetoothLEAdvertisementsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_bluetooth_le_advertisements(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_device_request" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_device_request<Result>(
        _ message: BluetoothDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_device_request(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_get_services" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_get_services<Result>(
        _ message: BluetoothGATTGetServicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothGATTGetServicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_gatt_get_services(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_read" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_read<Result>(
        _ message: BluetoothGATTReadRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothGATTReadRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_gatt_read(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_write" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_write<Result>(
        _ message: BluetoothGATTWriteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothGATTWriteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_gatt_write(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_read_descriptor" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_read_descriptor<Result>(
        _ message: BluetoothGATTReadDescriptorRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothGATTReadDescriptorRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_gatt_read_descriptor(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_write_descriptor" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_write_descriptor<Result>(
        _ message: BluetoothGATTWriteDescriptorRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothGATTWriteDescriptorRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_gatt_write_descriptor(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_gatt_notify" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_gatt_notify<Result>(
        _ message: BluetoothGATTNotifyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothGATTNotifyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_gatt_notify(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_bluetooth_connections_free" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_bluetooth_connections_free<Result>(
        _ message: SubscribeBluetoothConnectionsFreeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BluetoothConnectionsFreeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeBluetoothConnectionsFreeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_bluetooth_connections_free(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "unsubscribe_bluetooth_le_advertisements" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func unsubscribe_bluetooth_le_advertisements<Result>(
        _ message: UnsubscribeBluetoothLEAdvertisementsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<UnsubscribeBluetoothLEAdvertisementsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.unsubscribe_bluetooth_le_advertisements(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "bluetooth_scanner_set_mode" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bluetooth_scanner_set_mode<Result>(
        _ message: BluetoothScannerSetModeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BluetoothScannerSetModeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bluetooth_scanner_set_mode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "subscribe_voice_assistant" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func subscribe_voice_assistant<Result>(
        _ message: SubscribeVoiceAssistantRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SubscribeVoiceAssistantRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.subscribe_voice_assistant(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "voice_assistant_get_configuration" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func voice_assistant_get_configuration<Result>(
        _ message: VoiceAssistantConfigurationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<VoiceAssistantConfigurationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<VoiceAssistantConfigurationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.voice_assistant_get_configuration(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "voice_assistant_set_configuration" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func voice_assistant_set_configuration<Result>(
        _ message: VoiceAssistantSetConfiguration,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<VoiceAssistantSetConfiguration>(
            message: message,
            metadata: metadata
        )
        return try await self.voice_assistant_set_configuration(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "alarm_control_panel_command" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func alarm_control_panel_command<Result>(
        _ message: AlarmControlPanelCommandRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<void>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<AlarmControlPanelCommandRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.alarm_control_panel_command(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}
